/* 
FLEX CONTAINER E FLEX ITEM
-----------------------------------------------

https://www.origamid.com/projetos/flexbox-guia-completo/


1) FLEX CONTAINER

Propriedades:
------------------------

Display:
a) flex-direction
b) flex-wrap
c) flex-flow
d) justify-content
e) align-items
f) align-content


2) FLEX ITEM

Propriedades:
---------------------
a) flex-grow
b) flex-basis
c) flex-shrink
d) flex
e) order
f) align-self


-----------------------------------------
1) FLEX CONTAINER
-----------------------------------------


O FLEX CONTAINER é a tag que envolve os itens Flex; 
Ao indicar:
** display:flex --> Define os elems como um flex container; seus filhos serão considerados Flex-Itens 

Comportamento padrão do Flex: 
------------------------------------------------
a) Deixam os elems em "caixas";
b) Em Row --> em Linha
c) Os flex-items ocupam:

c.1) o máximo de espaço** vertical possível (comportamento grow) --> Obs. Para ajustar utilizar Align-items
c.2) Ítens Internos == o máximo de espaço** possível ( MESMO que 'transborde' o Container)

d) no-wrap

IMPORTANTE:
-------------------------
** Ocupam o máximo de espaço --> desde que se DEFINA esse espaço!!
SEMPRE definir um tamanho (normal, mínimo ou máx) para que os Flex-items possam CRESCER dentro do container!
Ou add --> Flex = 1

1. Display: block(padrão) --> os valores das tags ocupam todo o espaço horizontal disponível com quebra de linha
2. Imagens não se comportam bem com Flex-Container == colocar DENTRO de uma DIV

------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------
A) FLEX-DIRECTION
-------------------------------  

a)Row - padrão
a.1) Row-reverse => Ordem reversa dos Flex-Itens na linha (os da dir vao p a esquerda)

b) Column => em coluna => bom p mobile
b.1 )Column-reverse Ordem reversa dos Flex-Itens na coluna (os de baixa ficam em cima)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------
B) FLEX-WRAP => 'Quebra'
------------------------------------------
Inibe o corpotamento-padão (no-wrap) de 'transbordar' o Container;
quebra e passa p a baixo => formando uma nova linha ou coluna

OBS.:o valor contino na tag dos Flex-items também é quebrado (caso de + 1 palavra no elem)

**
*)no-wrap - padrão
*)wrap
*)wrap-reverse


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

C) FLEX-FLOW = FLEX-DIRECTION + WRAP
--------------------------------------------------------------
Flex-flow: row nowrap
flex-flow: row wrap
flex-flow: column nowrap


** POUCO UTILIZADO:
quando mudamos o flex-direction == column, mantemos o padrão do flex-wrap == nowrap;
quando mudamos o flex-wrap == wrap, mantemos o padrão do flex-direction == row

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------
D) JUSTIFY-CONTENT (Horizontal)
------------------------------------------------------

Alinha os flex-itens no container de acordo com o eixo do container:
a) O Eixo de justificado é o HORIZONTAL:
Em Row => a borda de orientação é a esq/direita
Em Column => a borda de orientação é  a superior/inferior


b) Só funciona se os itens NÃO ocuparem todo o container (deve existir um gap)
flex-grow também deve ser = 0
flex= 1 --> não funciona!

Obs.: usar para alinhar itens tipo em um nav, um na esquerda e outro direita

Propriedades
--------------------

a) flex-start - padrão
Alinha os itens ao início do container.

b) flex-end
Alinha os itens ao final do container.

c) center
Alinha os itens ao centro do container.

d) space-between
Cria um espaçamento igual entre os elementos. Mantendo o primeiro grudado no início 
e o último no final --> QD tenho 3 items --> bom para deixar 1 item centralizado!!

e) space-around
Cria um espaçamento entre os elementos. Os espaçamentos do meio são duas vezes maiores 
que o inicial e final.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------
E) ALIGN-ITENS (Vertical)
-----------------------------------
Alinha os flex-itens no container de acordo com o eixo do container (VERTICAL).
O Eixo de justificado é o VERTICAL

Em Row => a borda de orientação é a superior/inferior
Em Column => a borda de orientação é esq/direita

Propriedades
--------------------

a) stretch = padrão 
Faz com que os flex itens cresçam IGUALMENTE.
DE ACORDO com o flex-item de maior height

b) flex-start
Alinha os itens a borda vertical superior do container

c) flex-end
Alinha os itens a borda vertical inferior do container

d) center
Alinha os itens ao centro vertical do container.

e) baseline
Alinha os itens de acordo com a linha base da tipografia (Conteúdo interno).

OBS>
PARA ALINHAR UMA DIV EXATAMENTE NO CENTRO DE UM CONTAINER (EIXOS X E Y)
justify-content: center
align-itens: center


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------
F) ALIGN-CONTENT (conteúdo) => +1 linha interna nos flex-itens
-----------------------------------------------------------------------------

Alinha as linhas do container em relação ao eixo VERTICAL para quando o WRAP OCORREU:
Semelhante ao justify-content na vertical => levando em consideração o CONTEÚDO INTERNO dos elementos

IMPORTANTE:
---------------------
Anula o efeito do height dos flex-items

a) A propriedade só funciona se existir +1 linha de flex-itens
b) Ocupa todo o espaço horizontal( semelhante= FLEX-GROW ATIVADO)
c) Flex-wrap precisa ser == wrap ( + 1 LINHA ITENS EXTERNOS)
d) O Container deve ter um espaço maior que a soma das linhas dos itens, propriedades align-content tenham efeito.
Isso significa que se você não definir HEIGHT para o CONTAINER, a propriedade não influencia no layout.

** A borda de orientação é a superior/inferior


Propriedades
--------------------

a) stretch = padrão
Faz com que os flex itens cresçam igualmente na vertical. (Padrão do flex)

b) flex-start;
Alinha todas as linhas de itens ao início.

c) flex-end;
Alinha todas as linhas de itens ao final.

d) center;
Alinha todas as linhas de itens ao centro.

d) space-between;
Cria um espaçamento igual entre as linhas. Mantendo a primeira grudada no topo e a última no bottom.

e) space-around;
Cria um espaçamento entre as linhas. Os espaçamentos do meio são duas vezes maiores que o top e bottom.



MTO IMPORTANTE:
----------------------------
Para alinhar o conteúdo interno de uma div, posso utilizar o Align-content: center ou
trnasformar os flex-items em flex - display: flex + align-items: center


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------
2) FLEX ITEM
-----------------------------------------

a) O FLEX ITEM são os itens dentro do Container.

b) FLEX ITEM também podem se tornar flex Containers, passando então os seus filhos a serem FLEX ITEM
e assim sucessivamente


-----------------------------------------------------
A) FLEX-GROW (crescer) 
------------------------------------------------------

Permite que os Itens ocupem todo espaço disponível dentro do container
(similar a um aumento de padding)

Propriedade
--------------------
Flex-grow = 0 (padrão) --> inativo |  = 1 --> ativo

OBS.:
Valores > 1 = o item-específico ocupará mais espaço proporcionalmente* no container que os demais filhos
* proporcional aos demais valores de flex-grow;
* valores são multiplicados.

a) quem cresce é o PADDING na orientação esq/direita
** Caso tenha width/height, cresce alem(+) do tam definido para ele(s)

b)depende também do tamanho do conteudo => +conteudo, +espaço ocupado

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------
B) FLEX-BASIS (espaço antes/depois do conteúdo)
--------------------------------------------------------------------

Indica o tamanho inicial do flex-item antes da distribuição do espaço restante (flex-grow) e tamanho mín que mantém antes de quebrar*;
Qd definimos flex-grow:1 e temos flex-basis:auto, o valor restante para ocupar no container 
é distribuido ao redor (antes e depois) do conteúdo do flex-item;

* (qd tenho +1 flex-item em linha): ou defino esse valor, ou defino um min-width

OBS.: 
---------
É necessario flex-grow= ativo
(EXCETO para casos de flex-bases > 1 --> com outras unidades)

Propriedade
--------------------

a) Auto = padrão
-----------------------
Ele faz com que a largura da base seja igual a do item (distribui o mesmo valor de flex-grow de forma uniforme = esq/dir). 
Se o item não tiver tamanho especificado, o tamanho será de acordo com o conteúdo.

a.1) Auto + width (definido)
O width é aplicado metade para cada lado do Item + o grow
Obs. --> os demais itens podem encolher proporcionalmente para compensar 
o tamanho específico do item em relação ao tamanho total do container

b) flex-basis: 0
---------------------
Se o flex-grow for igual ou maior que 1, ele tentará manter TODOS os elementos com a MESMA LARGURA total*, 
independente do conteúdo (por isso o 0 é o valor mais comum do flex-basis). Caso contrário o item terá a largura do seu conteúdo.

*Caso todos os elementos estiverem setados com a prorpiedade de Flex-base = 0!

b.1) flex-basis: 0 + width(definido)
IGNORA valores para pré-definidos de width e tentará manter TODOS os elementos com a MESMA LARGURA total.
(Respeita o min-width)

b.2) flex-basis: 0 + flex-grow > 1
Cresce o item com flex-grow > 1 proporcionalmente e distribui um valor igual aos demais.

c) Unidade
------------------
Pode ser em %, em, px e etc.

Importante
----------------
Posso usar SEM o flex-grow

c.1) números > 0 => funciona como um max-width => tenta manter o valor definido (total do Item = /2 para esq e dir), mas nunca será maior.
(exceto de o conteúdo for maior!)

c.2) posso usar a funcao calc() =>  
ex. 3 items dentro do container:
calc(33% - 5px) => tentara manter todos na mesma linha

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------
C) FLEX-SHRINK 
------------------------

Permite a redução do tamanho do item.

OBS.: Pouco influi no tamanho final dos item dentro do container
Somente com:
1) flex-shrink = 0 + conteúdo interno maior que o conteiner == Não quebra a linha e mantem o conteúdo interno dentro do menor tamanho possível de box 
2) flex-shrink = 1 + flex-basis fixo + conteúdo interno pequeno == Não diminui o tamanho da box 

Maior  funcionamento => flex-basis fixo e wrap = nowrap

** Com flex-wrap= wrap --> vale o wrap

Propriedade
--------------------

a) flex-shrink: 1 = Valor padrão, permite que os itens tenham os seus tamanhos 
(seja esse tamanho definido a partir de width ou flex-basis) reduzidos para caber no container.

b) flex-shrink: 0 = Não permite a diminuição dos itens;
assim um item com flex-basis: 300px, nunca diminuirá menos do que 300px, mesmo que o conteúdo não ocupe todo esse espaço 
ou que extrapole o container
**textos grandes não quebra linha

c) flex-shrink: número  
Um item com shrink: 3 = diminuirá 3 vezes mais que um item com 1 (* c/ conteudo pequeno).

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------
D) FLEX
---------------

Atalho para flex-grow + flex-shrink + flex-basis
(Recomendado utiliz Flex ao invés deles em separado => compatibilidade nos browers - flex-basis = 0% OU 0)


Propriedade
--------------------

a) flex: 0 1 auto; -> Padrão
Se você não definir nenhum valor de flex ou para as outras propriedades separadas, 
o normal será flex-grow: 0, flex-shrink: 1 e flex-basis: auto.

b) flex: 1;
Define = flex-grow: 1; flex-shrink: 1; e flex-basis: 0; 
(em alguns browsers = 0 define como = 0%, pois estes ignoram valores sem unidades, porém a função do 0 e 0% é a mesma.)

flex: 2;
Define exatamente da mesma forma que o flex: 1; porém neste caso o flex-grow será de 2. 

flex: 3 2 300px
Define = flex-grow: 3; flex-shrink: 2; e flex-basis: 300px; 
**OBS=> posso usar esse valor do flex-basis como min-width 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------
E) ORDER
-----------------

muda a ordem dos flex- itens 

Propriedade
--------------------

a) order: número;
Número para modificar a ordem padrão. Pode ser negativo.
Menor número => em 1° lugar na disposição (negativo é menor que 0)
Mesma número de order => ordem HTML
Sem número => 0

Obs.:
Número elementos superior ao números de classes com order definido --> os de classe com order maior, vão sendo agrupados ao final do container
Como segunda prioridade, respeita a ordem HTML

b) order: 0; => valor padrão 
Significa que a ordem dos itens será a ordem apresentada no HTML. 
Se você quiser colocar um item do meio da lista no início da mesma, sem modificar os demais, 
o ideal é utilizar um valor negativo para este item, já que todos os outros são 0.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------
F) ALIGN-SELF --> Ítem específico
-----------------------------------------------

Alinhamento ESPECÍFICO de um ÚNICO flex item dentro do nosso container.

Caso um valor seja atribuído, ele PASSARÁ POR CIMA do que for atribuído no ALIGN-ITEMS do container.

OBS.: Vale lembrar que o alinhamento acontece tanto em linha quanto em colunas. 
Por exemplo o flex-start quando os itens estão em linhas, alinha o item ao topo da sua linha. 
Quando em colunas, alinha o item ao início (esquerda) da coluna.

Propriedade
--------------------

a) auto => Padrão
Vai respeitar o que for definido pelo align-items no flex-container.

b) flex-start;
Alinha o item ao início.

c) flex-end;
Alinha o item ao final.

d) center;
Alinha o item ao centro.

e) baseline;
Alinha o item a linha de base da tipografia.

f) stretch;
Estica o item.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
