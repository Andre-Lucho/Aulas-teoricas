
Diferenças entre os métodos: .append() e .appendChild()
---------------------------------------------------------------------------------

1. O Método .appendChild()
----------------------------------------
O método appendChild() é mais antigo e amplamente suportado. Ele é usado para adicionar um único nó existente como último filho de um elemento pai.

Características do appendChild():

Aceita apenas nós: Você só pode passar um nó DOM (como um elemento que você criou com document.createElement()) como argumento. Não pode passar strings ou múltiplos argumentos.

Move o nó: Se o nó que você está tentando adicionar já existe em outro lugar no DOM, appendChild() o moverá para a nova posição. Ele não cria uma cópia.

Retorna o nó adicionado: O método retorna o nó que foi adicionado.

2. O Método .append()
-------------------------------------------
O método append() é mais moderno e flexível. Ele foi introduzido como parte da API ChildNode e oferece mais funcionalidades do que appendChild().

Características do append():

Aceita múltiplos argumentos: Você pode passar vários nós ou strings (ou uma mistura de ambos) como argumentos. Todos eles serão adicionados em sequência como últimos filhos do elemento pai.

Aceita strings: Diferente de appendChild(), você pode passar strings diretamente, e elas serão convertidas em nós de texto.

Não retorna nada: O método append() não retorna o nó que foi adicionado. Ele retorna undefined.

Não move o nó: Se você passar um nó que já existe no DOM, append() o moverá. No entanto, sua principal vantagem é a capacidade de aceitar múltiplos argumentos, o que facilita a inserção de vários itens de uma vez.


Por que usar um ou outro?
---------------------------------------
appendChild(): Ainda é útil e funcional, especialmente se você só precisa adicionar um único nó e se preocupa com a compatibilidade com navegadores mais antigos (embora append() seja amplamente suportado hoje em dia).

append(): É geralmente a escolha preferida para a maioria das situações modernas. Sua flexibilidade para adicionar múltiplos nós ou strings diretamente simplifica bastante o código e o torna mais legível, como você demonstrou na sua função!