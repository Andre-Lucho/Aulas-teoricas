Memoization - Memorização (Cache)
---------------------------------------------------
---------------------------------------------------


Passo 1: Entendendo o Problema da Função fibonacci
------------------------------------------------------------------------------
Primeiro, olhe para a função fibonacci original:

function fibonacci(n) {
  if (n < 2) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}
Imagine que você queira calcular fibonacci(5). A função vai fazer uma "árvore" de chamadas:

fibonacci(5) chama fibonacci(4) e fibonacci(3).
fibonacci(4) chama fibonacci(3) e fibonacci(2).
fibonacci(3) chama fibonacci(2) e fibonacci(1).
Percebeu o problema? A função fibonacci(3) é calculada duas vezes, fibonacci(2) é calculada três vezes, e assim por diante. Isso é um desperdício enorme de processamento. A memoization resolve exatamente isso.


Passo 2: A Função Mágica memorize
------------------------------------------------------------------------------
A função memorize não calcula nada por si só. Pense nela como uma "fábrica de funções otimizadas". Ela recebe uma função qualquer (fn) como argumento e retorna uma nova versão dessa função com um superpoder: uma memória (o cache).

function memorize(fn) {
  // 1. A memória (cache) é criada.
  // Usamos um 'Map' porque ele é eficiente para qualquer tipo de chave.
  const cache = new Map();

  // 2. A 'fábrica' retorna uma nova função. É esta que usaremos no final.
  return function (...args) {
    // ... a lógica da otimização está aqui dentro ...
  };
}


Passo 3: A Lógica Dentro da Nova Função
------------------------------------------------------------------------------
Agora, vamos ver o que acontece quando chamamos a função otimizada que a memorize criou.

return function (...args) {
    3. Cria uma 'chave' única para os argumentos recebidos.
    Ex: se chamarmos com o número 5, a chave será "[5]".
    
    const key = JSON.stringify(args);

    4. VERIFICA A MEMÓRIA: "Eu já calculei isso antes?"
    
    if (cache.has(key)) {
      console.log('Buscando do cache:', key);  --> Adicionado para aprendizado
      return cache.get(key); --> Se sim, retorna o resultado salvo. Sem calcular de novo!
    }

    5. SE NÃO ESTIVER NA MEMÓRIA:
    console.log('Calculando e salvando:', key); --> Adicionado para aprendizado
    // Executa a função original (fn) com os argumentos recebidos.
    const result = fn.apply(this, args);
    
    // Salva o resultado no cache usando a chave.
    cache.set(key, result);
    
    // Retorna o resultado recém-calculado.
    return result;
  };

Em resumo, a nova função sempre olha no cache antes de fazer qualquer trabalho pesado. Se o resultado já está lá, ela o retorna imediatamente. Caso contrário, ela calcula, salva para a próxima vez, e então retorna.


Passo 4: Criando e Usando a Versão Otimizada fastFib
------------------------------------------------------------------------------
Aqui está a parte crucial que conecta tudo.

const fastFib = memorize(function fibonacci(n) {
  if (n < 2) return n;
  // Ponto chave aqui!
  return fastFib(n - 1) + fastFib(n - 2);
});

Por que a função dentro de memorize chama fastFib e não fibonacci?

Esta é a dúvida mais comum e a mais importante!

*A variável fastFib não é a função fibonacci original. Ela armazena a nova função retornada pela memorize, aquela que tem toda a lógica de cache.

* Se dentro dela chamássemos fibonacci(n - 1), estaríamos chamando a versão original, lenta e sem cache. O benefício da otimização seria perdido nas chamadas recursivas.

* Ao chamar fastFib(n - 1), estamos garantindo que cada chamada recursiva também use a lógica de cache. A função verifica o cache, calcula se necessário, salva e continua.

Quando você chama fastFib(5) pela primeira vez, ele calcula e salva os resultados para fastFib(5), fastFib(4), fastFib(3), etc. Se logo depois você chamar fastFib(6), ele não precisará recalcular tudo de novo; ele simplesmente pegará o resultado de fastFib(5) e fastFib(4) diretamente do cache.


Explicação passo a passo
------------------------------------------------------------------------------

Bloco 1: A Função memorize(fn)
---------------------------------------
function memorize(fn) {
  // ...
}

function memorize(fn): Estamos declarando uma função chamada memorize. O mais importante aqui é que ela é uma Higher-Order Function (Função de Ordem Superior), o que significa que ela aceita outra função como argumento. Essa função que ela recebe é apelidada de fn dentro do seu escopo.


Bloco 2: O Cache (new Map())
---------------------------------------
Dentro da função memorize, a primeira coisa que fazemos é criar o "cérebro" da nossa otimização.

const cache = new Map(); // variavel cache - armazena objetos

* Por que new Map()? :
Um Map em JavaScript é uma estrutura de dados para armazenar pares de chave-valor, muito parecida com um objeto {}. 
A grande vantagem do Map aqui é que suas chaves podem ser de qualquer tipo (não apenas strings) e ele é altamente otimizado para adições e buscas (.set(), .get(), .has()), que é exatamente o que precisamos para um cache eficiente.


Bloco 3: O Retorno (A Nova Função Otimizada)
----------------------------------------------------------------
A função memorize não executa fn. Em vez disso, ela retorna uma função completamente nova, que encapsula a lógica original.

return function (...args) {
    // ... Lógica do cache aqui ...
  };

return function (...args): Este é o coração do padrão.
* function(...): Estamos retornando uma função anônima (sem nome). É esta função que será, de fato, executada quando chamarmos nossa versão otimizada (fastFib).

* ...args: Esta é a sintaxe de rest parameter. Ela pega todos os argumentos que forem passados para esta nova função (por exemplo, fastFib(10)) e os agrupa em um array chamado args. Nesse caso, args seria [10].


Bloco 4: A Chave do Cache (JSON.stringify)
------------------------------------------------------------------------------
Dentro da função retornada, precisamos de uma forma de identificar unicamente cada chamada.

const key = JSON.stringify(args);

* Para usar o cache, precisamos de uma "etiqueta" (a chave) para cada resultado. Como os argumentos vêm em um array (args), não podemos usar o próprio array como chave, pois a comparação de arrays em JavaScript verifica a referência na memória, não o conteúdo.

* JSON.stringify resolve isso transformando o array [10] em uma string "[10]". Strings são facilmente comparáveis, então "[10]" será sempre a mesma chave para o mesmo input, servindo como um identificador perfeito para o cache.

Bloco 5: A Verificação e o Desempenho (cache.has / cache.get)
---------------------------------------------------------------------------------------
Aqui a mágica da otimização acontece.

if (cache.has(key)) {
      return cache.get(key); // se estiver no cache, pega os dados
    }

* if (cache.has(key)): A função pergunta ao cache: "Você tem uma entrada com a etiqueta (chave) key?".

* return cache.get(key);: Se a resposta for "sim", a função pega o valor previamente calculado usando cache.get(key) e o retorna imediatamente. O cálculo pesado é completamente ignorado. Este é o grande ganho de performance.


Bloco 6: O Cálculo e Armazenamento (fn.apply / cache.set)
----------------------------------------------------------------------------------------------
Este bloco só é executado se o resultado não estiver no cache.

const result = fn.apply(this, args); // se não, executa a funct original e armazena os dados
    cache.set(key, result);
    return result;


* fn é a função original que passamos para memorize (no nosso caso, a lógica de Fibonacci).

*.apply(this, args) é uma maneira de invocar a função fn. Ela define o contexto this e passa os argumentos (args) para ela.

* O resultado do cálculo pesado é armazenado na variável result.

* cache.set(key, result);: O resultado recém-calculado é salvo no cache com a sua respectiva chave. Agora, da próxima vez que a função for chamada com os mesmos argumentos, o Bloco 5 irá encontrar esse valor.
*return result;: A função retorna o resultado.


Bloco 7: A Criação Final (fastFib)
---------------------------------------------------
Aqui é onde usamos a "fábrica" memorize para criar nossa função otimizada.

const fastFib = memorize(function fibonacci(n) {
  if (n < 2) return n;
  return fastFib(n - 1) + fastFib(n - 2);
});

1. Passamos uma função (que contém a lógica recursiva de Fibonacci) como argumento para a memorize.

2. A memorize executa e nos retorna aquela nova função com toda a lógica de cache.

3. Essa nova função superpoderosa é armazenada na constante fastFib.

* return fastFib(n - 1) + fastFib(n - 2);: Como explicado antes, a recursão deve chamar fastFib. 
Assim, garantimos que cada passo da "árvore" de cálculo aproveite o sistema de cache, evitando recalcular qualquer valor que já tenha sido descoberto.



2)

Pergunta:
const cache = new Map() é o mesmo método de Arrays .map()?
---------------------------------------------------------------------------------------------------------------------

A resposta curta e direta é: Não, new Map() não é o mesmo que o método .map() de arrays.

1. new Map() - A Estrutura de Dados == Objeto tipo Map
------------------------------------------------------------------------------

Pense no new Map() como um objeto de armazenamento, uma espécie de dicionário ou fichário superpoderoso.

Finalidade: Armazenar e recuperar dados em pares de chave e valor.
O que é: É uma estrutura de dados. Você cria uma instância dela (new Map()) para guardar informações que poderá consultar mais tarde.
Como funciona: Você usa métodos como .set(chave, valor) para adicionar informações e .get(chave) para buscar uma informação.
Analogia: Imagine um dicionário de verdade. A "palavra" é a chave, e a "definição" é o valor. O new Map() é o dicionário inteiro.
Cria uma coleção de pares chave-valor

Exemplo prático:
const precosFrutas = new Map();

precosFrutas.set('maçã', 5.50); // chave: 'maçã', valor: 5.50
precosFrutas.set('banana', 3.20); // chave: 'banana', valor: 3.20
precosFrutas.set('laranja', 4.00); // chave: 'laranja', valor: 4.00

// Agora, podemos consultar um preço específico
console.log(precosFrutas.get('banana')); // Saída: 3.20

// Podemos verificar se uma fruta existe no nosso dicionário
console.log(precosFrutas.has('uva')); // Saída: false

No seu código de memorize, o cache é um new Map() usado exatamente para isso: armazenar o resultado de um cálculo (valor) usando os argumentos da chamada como etiqueta (chave).


.map --> Método de um Array que cria um novo array aplicando uma função a cada item de um array existente