Módulo 2
---------------------------------------

--------------------------------------------------------------------------------
Aula 1 - Desev. Colaborativo
--------------------------------------------------------------------------------

Pull Request - Solicitação para subir as mudanças do cídigo feitas na repositório local para o repositório remoto

1) Através da adição direta de colaboradores no repositório remoto
Repositório Remoto --> settings --> collaborators --> add people

2) Por Fork feito pelo colaborador


** Ver Img pasta



--------------------------------------------------------------------------------
Aula 2 - Tópicos Avançados de Git
--------------------------------------------------------------------------------

Rebasing
---------------------------------------
Re-linearização do histórico dos commits para apenas 1 branch

É feito quando tenho 2 ou mais ramos de branches que estão mais a frete (em commits) da branch principal, deixando os históricos desalinhados;
Acontece quando fazemos um merge do tipo 3-way-merge.

Obs -> Pode acontecer de se perder alguns commits no processo

IMPORTANTE:
---------------------------------------
*** Evitar executar o rebasing em branches públicas para não reescrever o histórico e causar incompatibilidade com outros colaboradores ***

** Ver Imagem aula


Passos
---------------------------------------

1) Fazer o checkout para a Branch 'Fonte' - que estamos trabalhando
2) fazer o rebasing --> git rebasing <branch destino>


** OBS: Na realidade, o rebase faz uma iteração por todos os commits da branch fonte e os copia para a branch destino, com novos hash's
Os commits originais são mandados para o garbage collector, porém não são deletados --> podem ser recuperados


A) Rebase Interativo
---------------------------------------
Pode ser usado o comando --> git rebasing -i <branch destino>
escolhendo qual dos commits serão feitos rebase


A.1) Squashing
------------------------------------------
 Técnica que pode ser aplicada juntamente com o Rebasing Interativo--> Comprimi todos os commits em 1 único

1) Fazer o checkout para a Branch 'Fonte' - que estamos trabalhando
2) fazer o rebasing --> git rebasing - i HEAD~(quantidade de commits PARA TRÁS (anteriores à última) que irei comprimir)

opções:
------------
pick --> manter o commit inalterado
squash --> comprimir
....

3) fazer um Rebase simples
4) fazer um Checkout para a branch principal
5) fazer um Merge na branch principal ( da branch que acabo de aplicar o rebase simples)



--------------------------------------------------------------------------------
Aula 3 - Resolução de problemas e recuperação
--------------------------------------------------------------------------------

Git Revert / Git Reset
---------------------------------------
Devem ser aplicadas APENAS no repositório local - para não causar conflitos com o repositório remoto == com os outros colaboradores


1) Git Reset
-----------------

git reset --opção <hash> ou HEAD~:
-------------------------------------------------------

a) hard --> retorna ao commit apontado deletando todas as alterações contidas nos commits(arquivos, branches, etc)

b) mixed --> retorna ao commit apontado, mantendo as alterações contidas nos commits e deixando elas na Working directory -- necessita dar git add + git commit

c) soft --> retorna ao commit apontado, mantendo as alterações contidas nos commits e deixando elas na Staging area -- necessita dar apenas git commit


2) Git Revert
-----------------
Criado um novo Commit com nova hash porém, com a CÓPIA de todas as info do commit do ponto onde será aplicado o Revert:
Estratégia de Reset, porém que PODE ser aplicadas quando meu Repositório Público está a frente do local, sem perder a linearidade

** OBS: 
1) Aplicar o Revert no commit onde quero aplicar o Revert --> git revert <hash do commit em que quero voltar>
2)Em caso de conflito da versão atual com a versão onde quero aplicar o Revert, posso usar:  --continue

3) Comando --> git commit --amend -m' ' --> altera a mensagem do último commit (através de um Revert)


3) Git Reflog
--------------------
Comando para listar todas as alterações feitas na HEAD (historico de comandos que fiz no git) com as suas Hash ---> caso o garbage collector não tenha apagado, posso voltar a qquer um deles com:
git checkout <hash>



--------------------------------------------------------------------------------
Aula 04 - SHA 1 hash
--------------------------------------------------------------------------------

Função hash --> Cálculo matemático que transforma um entrada de qquer (vários arquivos de vários tipos e tamanhos) em um arquivo de tamanho fixo 
SHA 1 --> criptografia

SHA 1 hash --> código usado pelo Git para versionamento e criptografia




--------------------------------------------------------------------------------
Aula 05 - .gitignore
--------------------------------------------------------------------------------

Exclui arquivos ao se criar um commit quando eles não são necessários para o envio ao repositório remoto

topal.com/developers/itignore --> site gerador automático de arquivos .gitignore



--------------------------------------------------------------------------------
Aula 06 - Tags no Git
--------------------------------------------------------------------------------

Tags demarcam commits que são mais importantes que outros:
São como um atalho para um commit importante, apenas utilizando um nome que dou a tag
Ex. Atualizações de releases

Tags são ponteiros textuais estáticos --> apontam p um commit específico + importante
São diferente dos ponteiros Branchs --> são ponteiros textuais dinâmicos --> a cada commit, o ponteiro da branch aponta para o commit + novo

São de 2 tipos:
A) Light Tag --> O hash fica armazenado na pasta refs/tags
B) Annotaded tag --> mais informações --> o hash fica na pasta objects + refs/tags


Comandos:
----------------
git tag <nome da tag> --> cria a Tag
git tag --> verifica todas as tags criadas
git tag -d <nome da tag> --> deleta a tag
git show <nome da tag> --> mostra as informações detalhadas da tag e do commit dela

git tag -a <nome da tag> -m'<Mensagem que quero deixar para a Tag> --> cria uma Annotaded Tag 


-------------------------------------------
Tags em Repositórios Remotos
-------------------------------------------
git push --tags --> Dá um push com as tags criadas
git push --delete origin(ou nome do repositório remoto) <nome da tag> --> Deleta a tag do repositório remoto


Importante:
---------------------------------------
Caso queria criar uma tag em um commit anterior ao atual:
1)fazer um git checkout para o commit desejado;
2) criar uma Branch nova e 
3) fazer o git tag

Depois, voltar para a main, com o git checkout main



------------------------------------------------------------------------------
Aula 07 - Stashing
------------------------------------------------------------------------------

É como uma working directory temporária(a parte da principal) para se fazer testes, experimentações, etc 
que poderão ou não ser incorporadas em minha working directory principal.

**Obs.:
-------------
O(s) arquivo(s) precisão estar sendo monitorados p se fazer o Stashing (estar na área de preparação ou modificados)

As stashes ficam salvas como commits(hash's) temporários em --> .git/refs/stash


Comandos:
-----------------
git stash --> coloca na área de stash (através de nova hash-commit)
git stash pop --> retorna o(s) arquivos que estavam na área de stash, mas deleta a área de stash e suas informações
git stash list --> lista as stash
git stash apply --> retorna o(s) arquivos que estavam na área de stash, mas Mantém a área de stash e suas informações

git stash drop --> deleta a área de stash e suas informações, sem retornar seus arquivos e informações.
git stash drop <hash da área de stash> --> deleta uma área de stash específica
git stash clear --> deleta todas os commits feitos na áreas de stash