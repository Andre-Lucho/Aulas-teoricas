Módulo 3
---------------------------------------


--------------------------------------------------------------------------------
Aula 1 - Fork no Git
--------------------------------------------------------------------------------

Utilidades e Benefícios do Fork: 

1) Desenvolvimento independente: consegue criar uma cópia do projeto de outra pessoa e trabalhar nele de forma independente, 
então ela não vai ser afetada;

2) Contribuição para projetos de código aberto: projetos de código aberto prosperam com contribuições da comunidade;

3) Aprendizado e experimentação: para aprendizes e desenvolvedores que desejam pegar o repositório e 
experimentar coisas novas em cima dele de forma livre;

4) Backup da base de código: caso o repositório original seja deletado ou corrompido, 
o código ainda existe nos forks feitos por outros usuários;

5) Construção de comunidade: o forking incentiva um senso de propriedade comunitária e desenvolvimento colaborativo.

Pull Request --> É uma requisição de 'push' do Repositório Forkado (da minha conta) para o Repositório Original



--------------------------------------------------------------------------------
Aula 2 - Automação e CI/CD
--------------------------------------------------------------------------------

CI/CD --> Continuous Integration / Continuous Delivery
---------------------------------------------------------------------------
Automação de Teste e Versões de Software diretamente para o mercado.

Ferramentas de CI/CD do GitHub:
-----------------------------------------------

GitHub Actions --> automações através de Eventos (modificações no git)
GitHub Packages --> gerenciamento e hospedagem de pacotes do próprio projeto
GitHUB API's --> integração com APIs externas
WebHooks --> avisa apps externos das modificações
Secrets Management



Passos para configurar CI com GitHub Actions:
----------------------------------------------------------------

1. Criar um Workflow de GitHub Actions;
2. Configurar o arquivo de Workflow;
3. Commit e push do arquivo de Workflow para o Repositório
4. Verificar a execução do Workflow;
5. Ajustar e melhorar (caso necessário).



--------------------------------------------------------------------------------
Aula 3 - Sumário de Funcionalidades do GitHub
--------------------------------------------------------------------------------
Segurança:
----------------
Repositórios Privados
Autenticação de 2 fatores
Code Scanning
Secretg Scanning

Pull Requests
--------------------
Required Reviews


Grafo de dependências


Gerência de projetos:
--------------------------------

Projects
Labels
Milestones
Issues
Gráfico unificado de contribuições
Gráfico de atividade da organização
Visões gerais de dependências da organização
Visões gerais do repositório
Wikis
GitHub Insights.


Administração de equipe e organizações:
---------------------------------------------------------

Organizations;
Invitations;
Team sync;
Custom roles;
Verificação de domínio;
API do registro de auditoria;
Restrições de criação de repositório;
Restrição de notificações.



Negócios
--------------
GitHub MarketPlace
GitHub Sponsors


GitHub Skills - Cursos



--------------------------------------------------------------------------------
Aula 4 - Git Hooks 
--------------------------------------------------------------------------------

Por que utilizar hooks no Git?
------------------------------------------
Validação de código --> Respeito de regras
Execução de Testes automatizados
Notificações
Deploy automatizados

O que são Hooks?
---------------------------
Automazação via Eventos
Ex. Roda um script qd faço um commit

Ex. - Hook pre-commit -- antes de finalizar a ação do commit, realizo outra ação ( como uma mensagem...)

Na pasta /.git/hooks --> Tenho alguns padrões que vêm com o Git -- Porém, posso criar outros:
Arquivos padrões do git termiam por '.sample' == Não Funcional--> para funcionar, precisa tirar essa extensão

Tipos de Hooks:
---------------------
a) Client-side Hooks:
pre-commit,
pos-commit,
pre-push,
....

b) Server-side Hooks:
pre-receive, 
update,
post-receive,
....

Obs:
----------
1. Por padrão, os Hooks NÃO são enviados para o Repositório remoto
Para serem enviados --> via bibliotecas; ou via arquivos nativos passando 'manualmente' para os demais colaboradores (não via Git)

Nativos
-------------
a) Personalização e gerenciamento dos hooks;
b) Facilidade para projetos menores;
c) Conhecimento da equipe.

Via bibliotecas
-------------------
a) Ferramentas de gerenciamento;
b) Padronização e Facilidade;
c) Integração com outras ferramentas de automação.



--------------------------------------------------------------------------------
Aula 6 - Garbage Collection 
--------------------------------------------------------------------------------

Mecanismo de Lixeira:
Remoção permanente de blobs, trees, commits e Light e Annotated tags e objetos inalcansáveis (sem referência - Hash) através de deleção, renomeação, reversão, ..., 
que foram descartados, mas permanecem alocados temporariamente no Git.

Objetivo: Otimização (e compactação) do repositório.
Prazo padrão de ativação: 30 dias ou após várias ações que geram 'resíduos' inalcansáveis em nosso repositório.

Comando: Git gc



--------------------------------------------------------------------------------
Aula 7 - Masterizando heads 
--------------------------------------------------------------------------------

Head --> aponta e permite a edição para o commit onde tenho o conteúdo atual da minha working directory:
Pode ser branches ou commits antigos (estado de detached head*)

Merge-Head
Fetch-Head
Origin-Head
Rebase-Head

Quando estou realizando as operações acima, tenho as respectivas 'heads' apontando para os comnits

* Detached head --> quando a head não está apontando para o último commit de uma branch, ele está em estado de detached head
Para sair --> estratégia mais usada --> criar uma nova branch a partir daquele commit